{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Django Meilisearch documentation","text":"<p>Django Meilisearch Integration is a simple and efficient way to integrate Meilisearch into Django projects. This library allows you to easily index and search your Django models with high performance and minimal configuration.</p>"},{"location":"#objectives","title":"Objectives","text":"<p>The goal of this project is to provide a seamless integration between Django and Meilisearch, enabling:</p> <ul> <li>Automatic and CLI-based indexing of Django models.</li> <li>Real-time search capabilities with powerful filtering and ranking.</li> <li>Simple and flexible configuration, requiring minimal setup.</li> </ul>"},{"location":"#benefits-to-use","title":"Benefits to use","text":"<p>By using Django Meilisearch, you gain the following advantages:</p> <ul> <li>\ud83d\udd0e Blazing Fast Search: Meilisearch offers near-instantaneous search with typo tolerance.</li> <li>\ud83d\udd27 Easy Setup: No complex configurations; works with Django models effortlessly.</li> <li>\ud83c\udf10 Open Source: Free to use and improve under the MIT license.</li> </ul>"},{"location":"#minimal-requirements","title":"Minimal requirements","text":"<p>To use this integration, ensure your environment meets the following requirements:</p> Requirement Version Python 3.9+ Django 4.0+ Meilisearch Server 1.9+"},{"location":"advanced_features/","title":"Advanced features","text":"<p>...</p>"},{"location":"basic_usage/","title":"Basic usage","text":"<p>This tutorial will guide you through the basic usage of the <code>django_meilisearch</code> library. You will learn how to install the library, configure Meilisearch in your Django project, create a Meilisearch index from a Django model, synchronize data, and perform a basic search.</p>"},{"location":"basic_usage/#installation-and-configuration","title":"Installation and configuration","text":"<p>Install the library in your Django project using your preferred package manager. For example, using <code>pip</code>:</p> <pre><code>pip install django_meilisearch\n</code></pre>"},{"location":"basic_usage/#add-library-to-installed_apps","title":"Add library to INSTALLED_APPS","text":"<p>To use the library, it's necessary to add it to the <code>INSTALLED_APPS</code> list in your Django project's <code>settings.py</code> file.</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'django_meilisearch',\n]\n</code></pre>"},{"location":"basic_usage/#configure-meilisearch-in-settingspy","title":"Configure Meilisearch in <code>settings.py</code>","text":"<p>Add the following configuration to your Django project's <code>settings.py</code> file to connect to your Meilisearch server:</p> <pre><code>DJANGO_MEILISEARCH = {\n    \"url\": \"http://localhost:7700\",  # Your MeiliSearch host\n    \"api_key\": \"meilisearch_master_key\",  # Your MeiliSearch master key\n    \"timeout\": 1,  # Timeout for MeiliSearch requests in seconds (optional)\n}\n</code></pre>"},{"location":"basic_usage/#create-a-meilisearch-index-from-a-django-model","title":"Create a Meilisearch index from a Django model","text":"<p>To create a Meilisearch index from a Django model, you need to define a index class that inherits from <code>BaseIndex</code> and specify the model to index.</p> <pre><code>from django_meilisearch.index import BaseIndex\n\nfrom myapp.models import MyModel\n\n\nclass MyIndex(BaseIndex):\n    name = \"my_index\"  # Name of the Meilisearch index\n    model = MyModel  # Django model to index\n</code></pre>"},{"location":"basic_usage/#how-to-synchronize-data","title":"How to synchronize data","text":"<p>To synchronize data between your Django model and the Meilisearch index, the library provides management commands to synchronize data between your Django model and the Meilisearch index. They have the following common syntax:</p> <pre><code>python manage.py meilisearch {action} {index_name} \n</code></pre> <p>The <code>index_name</code> parameter is the name of the Meilisearch index to synchronize. If you don't specify an index name, the library will try to apply the <code>action</code> synchronize all indexes.</p> <p>The <code>action</code> parameter can be one of the following:</p> Action Description <code>create</code> Create the Meilisearch index, if it doesn't exist. Otherwise, it will do nothing. <code>populate</code> Populate an existing Meilisearch index with data from the Django model. If the index doesn't exist, it will return an error. <code>rebuild</code> Destroy the Meilisearch index, recreate it, and populate it with data from the Django model. <code>destroy</code> Clean and destroy the Meilisearch index. <p>The actions listed above are synchronous, meaning that they will block the execution of the command until the operation is completed. If you have a large dataset, consider using the asynchronous versions of these commands, which are preffixed with <code>a</code>. For example, <code>apopulate</code> will populate the index asynchronously.</p> <p>Note</p> <p>The asynchronous versions of the commands will return a task ID (or a list of task IDs if you are populating a large dataset) that you can use to check the status of the operation.</p>"},{"location":"basic_usage/#basic-search-example","title":"Basic search example","text":"<p>To perform a basic search using the Meilisearch index, you can use the <code>search</code> method provided by the index class. The <code>search</code> method accepts a query string and returns a list of search results.</p> <pre><code>from myapp.indexes import MyIndex\n\n\nclass MyView(View):\n    def get(self, request):\n        query = request.GET.get(\"q\", \"\")\n        results = MyIndex.search(query)\n        return JsonResponse({\"results\": results})\n</code></pre>"},{"location":"contributing/","title":"Contributing to Django Meilisearch integration","text":"<p>Thank you for considering contributing to this project! We welcome contributions from the community to help improve and expand the Django-Meilisearch integration.</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the repository","text":"<p>Click the Fork button at the top-right corner of the repository page to create your own copy.</p>"},{"location":"contributing/#2-clone-your-fork","title":"2. Clone your fork","text":"<p>Clone your forked repository to your local machine:</p> <pre><code>git clone https://github.com/{your_username}/django_meilisearch.git\ncd django_meilisearch\n</code></pre>"},{"location":"contributing/#3-set-up-the-development-environment","title":"3. Set up the development environment","text":"<p>Ensure you have Python and Poetry installed and set up a virtual environment:</p> <pre><code>poetry install\npoetry shell\n</code></pre> <p>Additionally, you need to have a Meilisearch instance running. To make things easier, you can use Docker for this:</p> <pre><code>docker run --name meilisearch -p 7700:7700 --rm -d getmeili/meilisearch:latest\n</code></pre> <p>Note</p> <p>I use to run the container using <code>--rm</code> option to automatically remove the container when it stops, but you can ommit this option if you want to reuse the same container.</p>"},{"location":"contributing/#4-create-a-new-branch","title":"4. Create a new branch","text":"<p>Always create a new branch for your changes:</p> <pre><code>git switch -c {prefix}/{description}  # or git checkout -b {prefix}/{description} if you are using an older version of git\n</code></pre> <p>Warning</p> <p>We use Git Flow to manage branches with the default naming convention. Make sure to follow the naming convention for your branch. If you prefer, you can use the Git Flow extension.</p> Branch type Prefix Example Feature feature feature/your-feature-name Bugfix fix fix/your-bug-name Hotfix hotfix hotfix/your-hotfix-name"},{"location":"contributing/#5-make-your-changes","title":"5. Make your changes","text":"<p>Modify the code, add new features, or fix bugs. Make sure to follow the existing code style.</p>"},{"location":"contributing/#6-run-tests","title":"6. Run tests","text":"<p>Before submitting a pull request, ensure all check and tests pass:</p> <pre><code>poetry run check\n</code></pre>"},{"location":"contributing/#7-commit-and-push-your-changes","title":"7. Commit and push your changes","text":"<p>Commit your changes and push them to your fork:</p> <pre><code>git add .\ngit commit -m \"Your commit message\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#8-open-a-pull-request","title":"8. Open a Pull Request","text":"<p>Go to the original repository and click the New pull request button. Fill in the details and submit your pull request.</p> <p>Note</p> <p>Make sure to reference the issue you are addressing in your pull request description and to provide a detailed explanation of your changes.</p>"},{"location":"contributing/#contribution-guidelines","title":"\ud83d\udca1 Contribution guidelines","text":"<ul> <li>Make sure to follow the package's code style.</li> <li>Write tests for new features and bug fixes.</li> <li>Keep commits clean and concise.</li> <li>Update the documentation if necessary.</li> </ul>"},{"location":"contributing/#need-help","title":"\ud83e\udd1d Need help?","text":"<p>If you have any questions or need help with anything, feel free to open an issue or reach out to the maintainers.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2025 Lucas Henrique</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}