{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Django Meilisearch documentation","text":"<p>Django Meilisearch Integration is a simple and efficient way to integrate Meilisearch into Django projects. This library allows you to easily index and search your Django models with high performance and minimal configuration.</p>"},{"location":"#objectives","title":"Objectives","text":"<p>The goal of this project is to provide a seamless integration between Django and Meilisearch, enabling:</p> <ul> <li>Automatic and CLI-based indexing of Django models.</li> <li>Real-time search capabilities with powerful filtering and ranking.</li> <li>Simple and flexible configuration, requiring minimal setup.</li> </ul>"},{"location":"#benefits-to-use","title":"Benefits to use","text":"<p>By using Django Meilisearch, you gain the following advantages:</p> <ul> <li>\ud83d\udd0e Blazing Fast Search: Meilisearch offers near-instantaneous search with typo tolerance.</li> <li>\ud83d\udd27 Easy Setup: No complex configurations; works with Django models effortlessly.</li> <li>\ud83c\udf10 Open Source: Free to use and improve under the MIT license.</li> </ul>"},{"location":"#minimal-requirements","title":"Minimal requirements","text":"<p>To use this integration, ensure your environment meets the following requirements:</p> Requirement Version Python 3.9+ Django 4.0+ Meilisearch Server 1.9+"},{"location":"advanced_features/","title":"Advanced features","text":"<p>The integration provide some advanced features in search and indexing. Some of them are about the search index configuration, others are about the search query configuration.</p>"},{"location":"advanced_features/#index-configuration","title":"Index configuration","text":"<p>One of the most important features of the integration is the ability to configure the search index. This is done by adding some variables to the index class. You can configure the primary key field for the index and the fields that should be indexed and fields that should be configured as searchable, filterable or sortable. It's import to optimize the index configuration to improve the search performance, reduce the index size and improve the search relevance.</p>"},{"location":"advanced_features/#primary-key-field","title":"Primary key field","text":"<p>The primary key field is the field that uniquely identifies a record in the index. By default, the primary key field is the model primary key field. You can change the primary key field by setting the <code>primary_key</code> variable in the index class as long as the field is setted as <code>unique</code> in the model.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    primary_key = 'my_field'\n</code></pre>"},{"location":"advanced_features/#searchable-fields","title":"Searchable fields","text":"<p>The searchable fields are the fields that are used to perform the search. By default, all of the model fields are searchable. You can change the searchable fields by setting the <code>searchable_fields</code> variable in the index class to a list of field names.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    searchable_fields = ['field1', 'field2']\n</code></pre>"},{"location":"advanced_features/#filterable-fields","title":"Filterable fields","text":"<p>The filterable fields are the fields that can be used to filter the search results. By default, all of the model fields are filterable. You can change the filterable fields by setting the <code>filterable_fields</code> variable in the index class to a list of field names.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    filterable_fields = ['field1', 'field2']\n</code></pre>"},{"location":"advanced_features/#sortable-fields","title":"Sortable fields","text":"<p>The sortable fields are the fields that can be used to sort the search results. By default, all of the model fields are sortable. You can change the sortable fields by setting the <code>sortable_fields</code> variable in the index class to a list of field names.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    sortable_fields = ['field1', 'field2']\n</code></pre>"},{"location":"advanced_features/#use-timestamp","title":"Use timestamp","text":"<p>If you want to store the DateTimeField fields as timestamps in the index, you can set the <code>use_timestamp</code> variable in the index class to <code>True</code>. By default, the DateTimeField fields are stored as strings in the index, but you can store them as timestamps to improve features like sorting and filtering.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    use_timestamp = True\n</code></pre>"},{"location":"advanced_features/#indexing-batch-size","title":"Indexing batch size","text":"<p>When you have a large model, with a lot of fields and records, it is recommended to use the indexing batch size to reduce the memory usage and improve the indexing performance. You can change the indexing batch size by setting the <code>indexing_batch_size</code> variable in the index class to an integer value. The default value is <code>100.000</code> records.</p> <pre><code>class MyModelIndex(BaseIndex):\n    name = 'my_index'\n    model = MyModel\n    indexing_batch_size = 1_000\n</code></pre> <p>Note</p> <p>Make sure to rebuild the index after changing the index configuration to apply the changes.</p>"},{"location":"advanced_features/#query-configuration","title":"Query configuration","text":"<p>In addition to configuring indexes, you can also send some parameters to the search query. These parameters can be used to configure the search query to improve the search relevance, filter the search results, sort the search results, paginate the search results and more.</p>"},{"location":"advanced_features/#pagination","title":"Pagination","text":"<p>The pagination parameters are used to paginate the search results. You can paginate the search results by specifying the <code>offset</code> and <code>limit</code> parameters or the <code>hits_per_page</code> and <code>page</code> parameters.</p>"},{"location":"advanced_features/#offset-and-limit","title":"Offset and limit","text":"<p>Using the <code>offset</code> and <code>limit</code> parameters you can specify the pagination of the search results similar to the SQL <code>LIMIT</code> and <code>OFFSET</code> clauses. The <code>offset</code> parameter is used to specify the number of records to skip and the <code>limit</code> parameter is used to specify the number of records to return.</p> <pre><code>query = MyIndex.search('python', offset=10, limit=10)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"published_at\": 1672531200\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"published_at\": 1672617600\n        },\n        ...\n    ],\n    \"limit\": 10,\n    \"offset\": 10,\n    \"nbHits\": 53\n}\n</code></pre>"},{"location":"advanced_features/#hits-per-page-and-page","title":"Hits per page and page","text":"<p>Using the <code>hits_per_page</code> and <code>page</code> parameters you can specify another way to paginate the search results. The <code>hits_per_page</code> parameter is used to specify the number of records to return per page and the <code>page</code> parameter is used to specify the page number to return.</p> <pre><code>query = MyIndex.search('python', hits_per_page=10, page=2)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"published_at\": 1672531200\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"published_at\": 1672617600\n        },\n        ...\n    ],\n    \"hits_per_page\": 10,\n    \"page\": 2,\n    \"nbHits\": 53\n}\n</code></pre>"},{"location":"advanced_features/#filter","title":"Filter","text":"<p>The filter parameter is used to filter the search results. You can filter the search results by specifying one or more fields and values to filter by. It is also possible to use boolean and logical operators to combine multiple filters.</p> <pre><code>query = MyIndex.search('python', filters='published_at &gt;= 1672617600')\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"published_at\": 1672617600\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#facets","title":"Facets","text":"<p>The facets parameter is used to retrieve the search results with the facets. You can specify the fields to retrieve the facets by a list of field names.</p> <pre><code>query = MyIndex.search('python', facets=['genre'])  # [\"*\"] can be used to retrieve all fields\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"genre\": \"Programming\",\n            \"published_at\": 1672531200\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"genre\": \"Programming\",\n            \"published_at\": 1672617600\n        },\n        ...\n    ],\n    \"facets\": {\n        \"genre\": {\n            \"Programming\": 2\n        }\n    }\n}\n</code></pre>"},{"location":"advanced_features/#attributes-to-retrieve","title":"Attributes to retrieve","text":"<p>The attributes to retrieve parameter is used to specify the fields to retrieve in the search results. You can specify the fields to retrieve by a list of field names.</p> <pre><code>query = MyIndex.search('python', attributes_to_retrieve=['title', 'author'])  # [\"*\"] can be used to retrieve all fields\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\"\n        },\n        {\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\"\n        }\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#attributes-to-crop","title":"Attributes to crop","text":"<p>The attributes to crop parameter is used to specify the fields to crop in the search results if the field is a text field. You can specify the fields to crop by a list of field names.</p> <pre><code>query = MyIndex.search('python', attributes_to_crop=['description'])\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 3,\n            \"title\": \"Fluent Python\",\n            \"author\": \"Luciano Ramalho\",\n            \"description\": \"Python is a powerful programming language that is easy to learn and use.\",\n            \"_formatted\": {\n                \"description\": \"...a powerful programming language that is easy to learn and use...\"\n            }\n        }\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#crop-length","title":"Crop length","text":"<p>The crop length parameter is used with the <code>attributes_to_crop</code> parameter to specify the length of the cropped text.</p> <pre><code>query = MyIndex.search('python', attributes_to_crop=['description:5'])\n</code></pre> <p>or</p> <pre><code>query = MyIndex.search('python', attributes_to_crop=['description'], crop_length=5)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_formatted\": {\n                \"description\": \"...programming in Python and develop...\"\n            }\n        }\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#crop-marker","title":"Crop marker","text":"<p>The crop marker parameter is used with the <code>attributes_to_crop</code> parameter to specify the marker to use to wrap the cropped text. The default value is <code>...</code>.</p> <pre><code>query = MyIndex.search('python', attributes_to_crop=['description'], crop_marker='[...]')\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_formatted\": {\n                \"description\": \"[...]the fundamentals of programming in Python and develop robust applications[...]\"\n            }\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#attributes-to-highlight","title":"Attributes to highlight","text":"<p>The attributes to highlight parameter is used to specify the fields to highlight in the search results if the field is a text field. You can specify the fields to highlight by a list of field names.</p> <pre><code>query = MyIndex.search('python', attributes_to_highlight=['title'])\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_formatted\": {\n                \"title\": \"&lt;em&gt;Python&lt;/em&gt; Crash Course\"\n            }\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#highlight-pre-and-post-tags","title":"Highlight pre and post tags","text":"<p>It can be used with the <code>attributes_to_highlight</code> parameter to specify the tags to use to wrap the highlighted text. The default value is <code>&lt;em&gt;</code>.</p> <pre><code>query = MyIndex.search('python', attributes_to_highlight=['title'], highlight_pre_tag='&lt;strong&gt;', highlight_post_tag='&lt;/strong&gt;')\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_formatted\": {\n                \"title\": \"&lt;strong&gt;Python&lt;/strong&gt; Crash Course\"\n            }\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#show-matches-position","title":"Show matches position","text":"<p>It is a boolean value used to specify whether to show the matches position in the search results. The default value is <code>false</code>.</p> <pre><code>query = MyIndex.search('python', show_matches_position=True)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_matchesInfo\": {\n                \"title\": [\n                    {\n                        \"start\": 0,\n                        \"length\": 6\n                    }\n                ],\n                \"description\": [\n                    {\n                        \"start\": 79,\n                        \"length\": 6\n                    }\n                ]\n            }\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#sort","title":"Sort","text":"<p>You can sort the search results by specifying the <code>sort</code> parameter. You can specify the fields to sort by and the sort order. The sort order can be <code>asc</code> for ascending order or <code>desc</code> for descending order.</p> <pre><code>query = MyIndex.search('python', sort=['published_at:desc'])\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"published_at\": 1672617600\n        },\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"published_at\": 1672531200\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#matching-strategy","title":"Matching strategy","text":"<p>The matching strategy parameter is used to specify the strategy to use to match the search query. It can be <code>last</code>, <code>all</code> or <code>frequency</code>. The default value is <code>last</code>. See the Meilisearch documentation for more information.</p> <pre><code>query = MyIndex.search('python', matching_strategy='all')\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"description\": \"If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you?\"\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#show-ranking-score","title":"Show ranking score","text":"<p>It is a boolean value used to specify whether to show the ranking score in the search results. The default value is <code>false</code>.</p> <pre><code>query = MyIndex.search('python', show_ranking_score=True)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"_rankingScore\": 0.98\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#show-ranking-score-details","title":"Show ranking score details","text":"<p>It is a boolean value used to specify whether to show the ranking score details in the search results. The default value is <code>false</code>. The ranking score details include the number of typos, words, proximity distance, attribute, exact words, exact words distance, words distance, filters, words position, words proximity, attribute score, and custom ranking.</p> <pre><code>query = MyIndex.search('python', show_ranking_score_details=True)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\",\n            \"_rankingScoreDetails\": {\n                \"words\": {\n                    \"order\": 0,\n                    \"matchingWords\": 4,\n                    \"maxMatchingWords\": 4,\n                    \"score\": 1.0\n                },\n                \"typo\": {\n                    \"order\": 2,\n                    \"typoCount\": 1,\n                    \"maxTypoCount\": 4,\n                    \"score\": 0.75\n                },\n                \"name:asc\": {\n                    \"order\": 1,\n                    \"value\": \"python\"\n                }\n            }\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"description\": \"If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you?\",\n            \"_rankingScoreDetails\": {\n                \"words\": {\n                    \"order\": 0,\n                    \"matchingWords\": 4,\n                    \"maxMatchingWords\": 4,\n                    \"score\": 1.0\n                },\n                \"typo\": {\n                    \"order\": 2,\n                    \"typoCount\": 1,\n                    \"maxTypoCount\": 4,\n                    \"score\": 0.75\n                },\n                \"name:asc\": {\n                    \"order\": 1,\n                    \"value\": \"python\"\n                }\n            }\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#ranking-score-threshold","title":"Ranking score threshold","text":"<p>The ranking score threshold parameter is used to specify the threshold to use to filter the search results by the ranking score excluding the results with a ranking score below the threshold. The default value is <code>null</code>.</p> <pre><code>query = MyIndex.search('python', ranking_score_threshold=0.80)\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"_rankingScore\": 0.97\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"_rankingScore\": 0.95\n        },\n        ...\n    ]\n}\n</code></pre>"},{"location":"advanced_features/#attributes-to-search-on","title":"Attributes to search on","text":"<p>The attributes to search on parameter is used to specify the fields to search on in the search query. You can specify the fields to search on by a list of field names.</p> <pre><code>query = MyIndex.search('python', attributes_to_search_on=['title'])\n</code></pre> <p>Results:</p> <pre><code>{\n    \"hits\": [\n        {\n            \"id\": 1,\n            \"title\": \"Python Crash Course\",\n            \"author\": \"Eric Matthes\",\n            \"description\": \"In this comprehensive guide, you will learn the fundamentals of programming in Python and develop robust applications with ease.\"\n        },\n        {\n            \"id\": 2,\n            \"title\": \"Automate the Boring Stuff with Python\",\n            \"author\": \"Al Sweigart\",\n            \"description\": \"If you've ever spent hours renaming files or updating hundreds of spreadsheet cells, you know how tedious tasks like these can be. But what if you could have your computer do them for you?\"\n        },\n        ...\n    ]\n}\n</code></pre> <p>Note</p> <p>You can find more information about the filter syntax in the Meilisearch documentation.</p>"},{"location":"basic_usage/","title":"Basic usage","text":"<p>This tutorial will guide you through the basic usage of the <code>django_meilisearch</code> library. You will learn how to install the library, configure Meilisearch in your Django project, create a Meilisearch index from a Django model, synchronize data, and perform a basic search.</p>"},{"location":"basic_usage/#installation-and-configuration","title":"Installation and configuration","text":"<p>Install the library in your Django project using your preferred package manager. For example, using <code>pip</code>:</p> <pre><code>pip install django_meilisearch\n</code></pre>"},{"location":"basic_usage/#add-library-to-installed_apps","title":"Add library to INSTALLED_APPS","text":"<p>To use the library, it's necessary to add it to the <code>INSTALLED_APPS</code> list in your Django project's <code>settings.py</code> file.</p> <pre><code>INSTALLED_APPS = [\n    ...\n    'django_meilisearch',\n]\n</code></pre>"},{"location":"basic_usage/#configure-meilisearch-in-settingspy","title":"Configure Meilisearch in <code>settings.py</code>","text":"<p>Add the following configuration to your Django project's <code>settings.py</code> file to connect to your Meilisearch server:</p> <pre><code>DJANGO_MEILISEARCH = {\n    \"url\": \"http://localhost:7700\",  # Your MeiliSearch host\n    \"api_key\": \"meilisearch_master_key\",  # Your MeiliSearch master key\n    \"timeout\": 1,  # Timeout for MeiliSearch requests in seconds (optional)\n}\n</code></pre>"},{"location":"basic_usage/#create-a-meilisearch-index-from-a-django-model","title":"Create a Meilisearch index from a Django model","text":"<p>To create a Meilisearch index from a Django model, you need to define a index class that inherits from <code>BaseIndex</code> and specify the model to index.</p> <pre><code>from django_meilisearch.index import BaseIndex\n\nfrom myapp.models import MyModel\n\n\nclass MyIndex(BaseIndex):\n    name = \"my_index\"  # Name of the Meilisearch index\n    model = MyModel  # Django model to index\n</code></pre>"},{"location":"basic_usage/#how-to-synchronize-data","title":"How to synchronize data","text":"<p>To synchronize data between your Django model and the Meilisearch index, the library provides management commands to synchronize data between your Django model and the Meilisearch index. They have the following common syntax:</p> <pre><code>python manage.py meilisearch {action} {index_name} \n</code></pre> <p>The <code>index_name</code> parameter is the name of the Meilisearch index to synchronize. If you don't specify an index name, the library will try to apply the <code>action</code> synchronize all indexes.</p> <p>The <code>action</code> parameter can be one of the following:</p> Action Description <code>create</code> Create the Meilisearch index, if it doesn't exist. Otherwise, it will do nothing. <code>populate</code> Populate an existing Meilisearch index with data from the Django model. If the index doesn't exist, it will return an error. <code>rebuild</code> Destroy the Meilisearch index, recreate it, and populate it with data from the Django model. <code>destroy</code> Clean and destroy the Meilisearch index. <p>The actions listed above are synchronous, meaning that they will block the execution of the command until the operation is completed. If you have a large dataset, consider using the asynchronous versions of these commands, which are preffixed with <code>a</code>. For example, <code>apopulate</code> will populate the index asynchronously.</p> <p>Note</p> <p>The asynchronous versions of the commands will return a task ID (or a list of task IDs if you are populating a large dataset) that you can use to check the status of the operation.</p>"},{"location":"basic_usage/#basic-search-example","title":"Basic search example","text":"<p>To perform a basic search using the Meilisearch index, you can use the <code>search</code> method provided by the index class. The <code>search</code> method accepts a query string and returns a list of search results.</p> <pre><code>from myapp.indexes import MyIndex\n\n\nclass MyView(View):\n    def get(self, request):\n        query = request.GET.get(\"q\", \"\")\n        results = MyIndex.search(query)\n        return JsonResponse({\"results\": results})\n</code></pre>"},{"location":"contributing/","title":"Contributing to Django Meilisearch integration","text":"<p>Thank you for considering contributing to this project! We welcome contributions from the community to help improve and expand the Django-Meilisearch integration.</p>"},{"location":"contributing/#how-to-contribute","title":"How to contribute","text":""},{"location":"contributing/#1-fork-the-repository","title":"1. Fork the repository","text":"<p>Click the Fork button at the top-right corner of the repository page to create your own copy.</p>"},{"location":"contributing/#2-clone-your-fork","title":"2. Clone your fork","text":"<p>Clone your forked repository to your local machine:</p> <pre><code>git clone https://github.com/{your_username}/django_meilisearch.git\ncd django_meilisearch\n</code></pre>"},{"location":"contributing/#3-set-up-the-development-environment","title":"3. Set up the development environment","text":"<p>Ensure you have Python and Poetry installed and set up a virtual environment:</p> <pre><code>poetry install\npoetry shell\n</code></pre> <p>Additionally, you need to have a Meilisearch instance running. To make things easier, you can use Docker for this:</p> <pre><code>docker run --name meilisearch -p 7700:7700 --rm -d getmeili/meilisearch:latest\n</code></pre> <p>Note</p> <p>I use to run the container using <code>--rm</code> option to automatically remove the container when it stops, but you can ommit this option if you want to reuse the same container.</p>"},{"location":"contributing/#4-create-a-new-branch","title":"4. Create a new branch","text":"<p>Always create a new branch for your changes:</p> <pre><code>git switch -c {prefix}/{description}  # or git checkout -b {prefix}/{description} if you are using an older version of git\n</code></pre> <p>Warning</p> <p>We use Git Flow to manage branches with the default naming convention. Make sure to follow the naming convention for your branch. If you prefer, you can use the Git Flow extension.</p> Branch type Prefix Example Feature feature feature/your-feature-name Bugfix fix fix/your-bug-name Hotfix hotfix hotfix/your-hotfix-name"},{"location":"contributing/#5-make-your-changes","title":"5. Make your changes","text":"<p>Modify the code, add new features, or fix bugs. Make sure to follow the existing code style.</p>"},{"location":"contributing/#6-run-tests","title":"6. Run tests","text":"<p>Before submitting a pull request, ensure all check and tests pass:</p> <pre><code>poetry run check\n</code></pre>"},{"location":"contributing/#7-commit-and-push-your-changes","title":"7. Commit and push your changes","text":"<p>Commit your changes and push them to your fork:</p> <pre><code>git add .\ngit commit -m \"Your commit message\"\ngit push origin feature/your-feature-name\n</code></pre>"},{"location":"contributing/#8-open-a-pull-request","title":"8. Open a Pull Request","text":"<p>Go to the original repository and click the New pull request button. Fill in the details and submit your pull request.</p> <p>Note</p> <p>Make sure to reference the issue you are addressing in your pull request description and to provide a detailed explanation of your changes.</p>"},{"location":"contributing/#contribution-guidelines","title":"\ud83d\udca1 Contribution guidelines","text":"<ul> <li>Make sure to follow the package's code style.</li> <li>Write tests for new features and bug fixes.</li> <li>Keep commits clean and concise.</li> <li>Update the documentation if necessary.</li> </ul>"},{"location":"contributing/#need-help","title":"\ud83e\udd1d Need help?","text":"<p>If you have any questions or need help with anything, feel free to open an issue or reach out to the maintainers.</p> <p>Happy coding! \ud83d\ude80</p>"},{"location":"license/","title":"License","text":""},{"location":"license/#mit-license","title":"MIT License","text":"<p>Copyright (c) 2025 Lucas Henrique</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"}]}